$dokka.format:html
$dokka.linkExtension:html
$dokka.location:net.cinnamon.client$get(net.minecraft.client.renderer.texture.TextureMap, kotlin.String)net.cinnamon.client/net.minecraft.client.renderer.texture.-texture-map/get.html
$dokka.location:net.cinnamon.client$get(net.minecraft.client.renderer.texture.TextureMap, net.minecraft.util.ResourceLocation)net.cinnamon.client/net.minecraft.client.renderer.texture.-texture-map/get.html
$dokka.location:net.cinnamon.client$getMusicRecord(net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-music-record.html
$dokka.location:net.cinnamon.client$getMusicRecord(net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-music-record.html
$dokka.location:net.cinnamon.client$getRecord(net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-record.html
$dokka.location:net.cinnamon.client$getRecord(net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-record.html
$dokka.location:net.cinnamon.client$getRecord(net.minecraft.util.SoundEvent, net.minecraft.util.SoundCategory, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-record.html
$dokka.location:net.cinnamon.client$getRecord(net.minecraft.util.SoundEvent, net.minecraft.util.SoundCategory, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.util.-sound-event/get-record.html
$dokka.location:net.cinnamon.client$isCutout#net.minecraft.util.BlockRenderLayernet.cinnamon.client/net.minecraft.util.-block-render-layer/is-cutout.html
$dokka.location:net.cinnamon.client$isCutoutMipped#net.minecraft.util.BlockRenderLayernet.cinnamon.client/net.minecraft.util.-block-render-layer/is-cutout-mipped.html
$dokka.location:net.cinnamon.client$isSolid#net.minecraft.util.BlockRenderLayernet.cinnamon.client/net.minecraft.util.-block-render-layer/is-solid.html
$dokka.location:net.cinnamon.client$isTranslucent#net.minecraft.util.BlockRenderLayernet.cinnamon.client/net.minecraft.util.-block-render-layer/is-translucent.html
$dokka.location:net.cinnamon.client$playSound(net.minecraft.client.audio.SoundHandler, net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.client.audio.-sound-handler/play-sound.html
$dokka.location:net.cinnamon.client$playSound(net.minecraft.client.audio.SoundHandler, net.minecraft.util.SoundEvent, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.client.audio.-sound-handler/play-sound.html
$dokka.location:net.cinnamon.client$playSound(net.minecraft.client.audio.SoundHandler, net.minecraft.util.SoundEvent, net.minecraft.util.SoundCategory, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.client.audio.-sound-handler/play-sound.html
$dokka.location:net.cinnamon.client$playSound(net.minecraft.client.audio.SoundHandler, net.minecraft.util.SoundEvent, net.minecraft.util.SoundCategory, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float)net.cinnamon.client/net.minecraft.client.audio.-sound-handler/play-sound.html
$dokka.location:net.cinnamon.client$pushBuffer(net.minecraft.client.renderer.BufferBuilder, kotlin.Int, net.minecraft.client.renderer.vertex.VertexFormat)net.cinnamon.client/net.minecraft.client.renderer.-buffer-builder/push-buffer.html
$dokka.location:net.cinnamon.client$putVertex(net.minecraft.client.renderer.BufferBuilder)net.cinnamon.client/net.minecraft.client.renderer.-buffer-builder/put-vertex.html
$dokka.location:net.cinnamon.client$resetTranslation(net.minecraft.client.renderer.BufferBuilder)net.cinnamon.client/net.minecraft.client.renderer.-buffer-builder/reset-translation.html
$dokka.location:net.cinnamon.client$withTranslation(net.minecraft.client.renderer.BufferBuilder, kotlin.Double, kotlin.Double, kotlin.Double)net.cinnamon.client/net.minecraft.client.renderer.-buffer-builder/with-translation.html
$dokka.location:net.cinnamon.common.base$caseFormat#kotlin.Stringnet.cinnamon.common.base/kotlin.-string/case-format.html
$dokka.location:net.cinnamon.common.base$getBlockColor(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, kotlin.Int)net.cinnamon.common.base/net.minecraft.world.-i-block-access/get-block-color.html
$dokka.location:net.cinnamon.common.base$getFoliageColor(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.base/net.minecraft.world.-i-block-access/get-foliage-color.html
$dokka.location:net.cinnamon.common.base$getGrassColor(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.base/net.minecraft.world.-i-block-access/get-grass-color.html
$dokka.location:net.cinnamon.common.base$getItemColor(net.minecraft.item.ItemStack, kotlin.Int)net.cinnamon.common.base/net.minecraft.item.-item-stack/get-item-color.html
$dokka.location:net.cinnamon.common.base$getWaterColor(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.base/net.minecraft.world.-i-block-access/get-water-color.html
$dokka.location:net.cinnamon.common.base$hashCode(kotlin.Any)net.cinnamon.common.base/kotlin.-any/hash-code.html
$dokka.location:net.cinnamon.common.base$isLowerCamel(kotlin.String)net.cinnamon.common.base/kotlin.-string/is-lower-camel.html
$dokka.location:net.cinnamon.common.base$isLowerHyphen(kotlin.String)net.cinnamon.common.base/kotlin.-string/is-lower-hyphen.html
$dokka.location:net.cinnamon.common.base$isLowerUnderscore(kotlin.String)net.cinnamon.common.base/kotlin.-string/is-lower-underscore.html
$dokka.location:net.cinnamon.common.base$isUpperCamel(kotlin.String)net.cinnamon.common.base/kotlin.-string/is-upper-camel.html
$dokka.location:net.cinnamon.common.base$isUpperUnderscore(kotlin.String)net.cinnamon.common.base/kotlin.-string/is-upper-underscore.html
$dokka.location:net.cinnamon.common.base$toCaseFormat(kotlin.String, com.google.common.base.CaseFormat)net.cinnamon.common.base/kotlin.-string/to-case-format.html
$dokka.location:net.cinnamon.common.base$toLowerCamel(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-lower-camel.html
$dokka.location:net.cinnamon.common.base$toLowerHyphen(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-lower-hyphen.html
$dokka.location:net.cinnamon.common.base$toLowerUnderscore(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-lower-underscore.html
$dokka.location:net.cinnamon.common.base$toRootLowerCase(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-root-lower-case.html
$dokka.location:net.cinnamon.common.base$toRootUpperCase(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-root-upper-case.html
$dokka.location:net.cinnamon.common.base$toString(kotlin.Any, kotlin.Function1((com.google.common.base.MoreObjects.ToStringHelper, kotlin.Unit)))net.cinnamon.common.base/kotlin.-any/to-string.html
$dokka.location:net.cinnamon.common.base$toTranslatable(net.minecraft.util.text.TextComponentString, kotlin.Array((kotlin.Any)))net.cinnamon.common.base/net.minecraft.util.text.-text-component-string/to-translatable.html
$dokka.location:net.cinnamon.common.base$toUpperCamel(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-upper-camel.html
$dokka.location:net.cinnamon.common.base$toUpperUnderscore(kotlin.String)net.cinnamon.common.base/kotlin.-string/to-upper-underscore.html
$dokka.location:net.cinnamon.common.base$withVariant(net.minecraft.util.ResourceLocation, kotlin.String)net.cinnamon.common.base/net.minecraft.util.-resource-location/with-variant.html
$dokka.location:net.cinnamon.common.block$add(net.minecraft.block.state.BlockStateContainer.Builder, net.minecraft.block.properties.IProperty((kotlin.Comparable((kotlin.Any)))))net.cinnamon.common.block/net.minecraft.block.state.-block-state-container.-builder/add.html
$dokka.location:net.cinnamon.common.block$add(net.minecraft.block.state.BlockStateContainer.Builder, net.minecraftforge.common.property.IUnlistedProperty((kotlin.Any)))net.cinnamon.common.block/net.minecraft.block.state.-block-state-container.-builder/add.html
$dokka.location:net.cinnamon.common.block$cycle(net.minecraft.block.state.IBlockState, net.minecraft.block.properties.IProperty((net.cinnamon.common.block.cycle.V)))net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/cycle.html
$dokka.location:net.cinnamon.common.block$get(net.minecraft.block.state.IBlockState, net.minecraft.block.properties.IProperty((net.cinnamon.common.block.get.V)))net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/get.html
$dokka.location:net.cinnamon.common.block$getExtendedState(net.minecraft.block.state.IBlockState, net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/get-extended-state.html
$dokka.location:net.cinnamon.common.block$getFluid(net.minecraft.block.Block)net.cinnamon.common.block/net.minecraft.block.-block/get-fluid.html
$dokka.location:net.cinnamon.common.block$id#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/id.html
$dokka.location:net.cinnamon.common.block$id#net.minecraft.block.state.IBlockStatenet.cinnamon.common.block/net.minecraft.block.state.-i-block-state/id.html
$dokka.location:net.cinnamon.common.block$invoke(net.minecraft.block.state.IBlockState, net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/invoke.html
$dokka.location:net.cinnamon.common.block$isEmpty#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/is-empty.html
$dokka.location:net.cinnamon.common.block$isFluidBlock#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/is-fluid-block.html
$dokka.location:net.cinnamon.common.block$isNotEmpty#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/is-not-empty.html
$dokka.location:net.cinnamon.common.block$isToolEffective(net.minecraft.block.state.IBlockState, net.minecraft.item.ItemStack)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/is-tool-effective.html
$dokka.location:net.cinnamon.common.block$item#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/item.html
$dokka.location:net.cinnamon.common.block$mirror(net.minecraft.block.state.IBlockState, net.minecraft.util.Mirror)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/mirror.html
$dokka.location:net.cinnamon.common.block$plus(net.minecraft.block.state.IBlockState, kotlin.Pair((net.minecraft.block.properties.IProperty((net.cinnamon.common.block.plus.V)), )))net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/plus.html
$dokka.location:net.cinnamon.common.block$rotate(net.minecraft.block.state.IBlockState, net.minecraft.util.Rotation)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/rotate.html
$dokka.location:net.cinnamon.common.block$stats#net.minecraft.block.Blocknet.cinnamon.common.block/net.minecraft.block.-block/stats.html
$dokka.location:net.cinnamon.common.block$with(net.minecraft.block.state.IBlockState, kotlin.Pair((net.minecraft.block.properties.IProperty((net.cinnamon.common.block.with.V)), )))net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/with.html
$dokka.location:net.cinnamon.common.block$with(net.minecraft.block.state.IBlockState, net.minecraft.block.properties.IProperty((net.cinnamon.common.block.with.V)), net.cinnamon.common.block.with.V)net.cinnamon.common.block/net.minecraft.block.state.-i-block-state/with.html
$dokka.location:net.cinnamon.common.block.properties$isUnlisted#net.minecraft.block.properties.IProperty((net.cinnamon.common.block.properties.isUnlisted.V))net.cinnamon.common.block.properties/net.minecraft.block.properties.-i-property/is-unlisted.html
$dokka.location:net.cinnamon.common.block.properties$toUnlisted(net.minecraft.block.properties.IProperty((net.cinnamon.common.block.properties.toUnlisted.V)))net.cinnamon.common.block.properties/net.minecraft.block.properties.-i-property/to-unlisted.html
$dokka.location:net.cinnamon.common.capability$asSequence(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/as-sequence.html
$dokka.location:net.cinnamon.common.capability$comparatorOutput#net.minecraftforge.items.IItemHandlernet.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/comparator-output.html
$dokka.location:net.cinnamon.common.capability$contains(net.minecraftforge.common.capabilities.ICapabilityProvider, net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.contains.T)))net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-i-capability-provider/contains.html
$dokka.location:net.cinnamon.common.capability$contains(net.minecraftforge.items.IItemHandler, net.minecraft.item.Item)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/contains.html
$dokka.location:net.cinnamon.common.capability$contains(net.minecraftforge.items.IItemHandler, net.minecraft.item.ItemStack)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/contains.html
$dokka.location:net.cinnamon.common.capability$forEach(net.minecraftforge.items.IItemHandler, kotlin.Function1((net.minecraft.item.ItemStack, kotlin.Unit)))net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/for-each.html
$dokka.location:net.cinnamon.common.capability$from(net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.from.T)), net.minecraftforge.common.capabilities.ICapabilityProvider)net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-capability/from.html
$dokka.location:net.cinnamon.common.capability$from(net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.from.T)), net.minecraftforge.common.capabilities.ICapabilityProvider, net.minecraft.util.EnumFacing)net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-capability/from.html
$dokka.location:net.cinnamon.common.capability$get(net.minecraftforge.common.capabilities.ICapabilityProvider, net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.get.T)), net.minecraft.util.EnumFacing)net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-i-capability-provider/get.html
$dokka.location:net.cinnamon.common.capability$get(net.minecraftforge.items.IItemHandler, kotlin.Int)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/get.html
$dokka.location:net.cinnamon.common.capability$has(net.minecraftforge.common.capabilities.ICapabilityProvider, net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.has.T)))net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-i-capability-provider/has.html
$dokka.location:net.cinnamon.common.capability$has(net.minecraftforge.common.capabilities.ICapabilityProvider, net.minecraftforge.common.capabilities.Capability((net.cinnamon.common.capability.has.T)), net.minecraft.util.EnumFacing)net.cinnamon.common.capability/net.minecraftforge.common.capabilities.-i-capability-provider/has.html
$dokka.location:net.cinnamon.common.capability$indexOf(net.minecraftforge.items.IItemHandler, net.minecraft.item.Item)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/index-of.html
$dokka.location:net.cinnamon.common.capability$indexOf(net.minecraftforge.items.IItemHandler, net.minecraft.item.ItemStack)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/index-of.html
$dokka.location:net.cinnamon.common.capability$insertItem(net.minecraftforge.items.IItemHandler, net.minecraft.item.ItemStack, kotlin.Boolean, kotlin.Boolean)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/insert-item.html
$dokka.location:net.cinnamon.common.capability$iterator(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/iterator.html
$dokka.location:net.cinnamon.common.capability$set(net.minecraftforge.items.IItemHandlerModifiable, kotlin.Int, net.minecraft.item.Item)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler-modifiable/set.html
$dokka.location:net.cinnamon.common.capability$set(net.minecraftforge.items.IItemHandlerModifiable, kotlin.Int, net.minecraft.item.ItemStack)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler-modifiable/set.html
$dokka.location:net.cinnamon.common.capability$toList(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-list.html
$dokka.location:net.cinnamon.common.capability$toMutableList(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-mutable-list.html
$dokka.location:net.cinnamon.common.capability$toMutableNonNullList(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.capability$toMutableSet(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-mutable-set.html
$dokka.location:net.cinnamon.common.capability$toNonNullList(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-non-null-list.html
$dokka.location:net.cinnamon.common.capability$toSet(net.minecraftforge.items.IItemHandler)net.cinnamon.common.capability/net.minecraftforge.items.-i-item-handler/to-set.html
$dokka.location:net.cinnamon.common.collection$firstOrElse(kotlin.collections.Iterable((net.cinnamon.common.collection.firstOrElse.T)), net.cinnamon.common.collection.firstOrElse.T)net.cinnamon.common.collection/kotlin.collections.-iterable/first-or-else.html
$dokka.location:net.cinnamon.common.collection$firstOrEmpty(kotlin.collections.Iterable((net.minecraft.block.Block)))net.cinnamon.common.collection/kotlin.collections.-iterable/first-or-empty.html
$dokka.location:net.cinnamon.common.collection$firstOrEmpty(kotlin.collections.Iterable((net.minecraft.item.Item)))net.cinnamon.common.collection/kotlin.collections.-iterable/first-or-empty.html
$dokka.location:net.cinnamon.common.collection$firstOrEmpty(kotlin.collections.Iterable((net.minecraft.item.ItemStack)))net.cinnamon.common.collection/kotlin.collections.-iterable/first-or-empty.html
$dokka.location:net.cinnamon.common.collection$isEmpty(kotlin.collections.Iterable((net.cinnamon.common.collection.isEmpty.T)))net.cinnamon.common.collection/kotlin.collections.-iterable/is-empty.html
$dokka.location:net.cinnamon.common.collection.fastutil$shuffle(it.unimi.dsi.fastutil.ints.IntList, java.util.Random)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/shuffle.html
$dokka.location:net.cinnamon.common.collection.fastutil$shuffle(it.unimi.dsi.fastutil.ints.IntList, kotlin.Long)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/shuffle.html
$dokka.location:net.cinnamon.common.collection.fastutil$synchronize(it.unimi.dsi.fastutil.ints.IntList)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/synchronize.html
$dokka.location:net.cinnamon.common.collection.fastutil$synchronize(it.unimi.dsi.fastutil.ints.IntList, kotlin.Any)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/synchronize.html
$dokka.location:net.cinnamon.common.collection.fastutil$toIntList(it.unimi.dsi.fastutil.ints.IntList)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/to-int-list.html
$dokka.location:net.cinnamon.common.collection.fastutil$toIntList(kotlin.IntArray)net.cinnamon.common.collection.fastutil/kotlin.-int-array/to-int-list.html
$dokka.location:net.cinnamon.common.collection.fastutil$toIntList(kotlin.collections.List((kotlin.Int)))net.cinnamon.common.collection.fastutil/kotlin.collections.-list/to-int-list.html
$dokka.location:net.cinnamon.common.collection.fastutil$toMutableIntList(it.unimi.dsi.fastutil.ints.IntList)net.cinnamon.common.collection.fastutil/it.unimi.dsi.fastutil.ints.-int-list/to-mutable-int-list.html
$dokka.location:net.cinnamon.common.collection.fastutil$toMutableIntList(kotlin.IntArray)net.cinnamon.common.collection.fastutil/kotlin.-int-array/to-mutable-int-list.html
$dokka.location:net.cinnamon.common.collection.fastutil$toMutableIntList(kotlin.collections.List((kotlin.Int)))net.cinnamon.common.collection.fastutil/kotlin.collections.-list/to-mutable-int-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.Array((net.cinnamon.common.collection.mc.toMutableNonNullList.V)))net.cinnamon.common.collection.mc/kotlin.-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.BooleanArray)net.cinnamon.common.collection.mc/kotlin.-boolean-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.ByteArray)net.cinnamon.common.collection.mc/kotlin.-byte-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.CharArray)net.cinnamon.common.collection.mc/kotlin.-char-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.DoubleArray)net.cinnamon.common.collection.mc/kotlin.-double-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.FloatArray)net.cinnamon.common.collection.mc/kotlin.-float-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.IntArray)net.cinnamon.common.collection.mc/kotlin.-int-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.LongArray)net.cinnamon.common.collection.mc/kotlin.-long-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.ShortArray)net.cinnamon.common.collection.mc/kotlin.-short-array/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toMutableNonNullList(kotlin.collections.Iterable((net.cinnamon.common.collection.mc.toMutableNonNullList.V)))net.cinnamon.common.collection.mc/kotlin.collections.-iterable/to-mutable-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.Array((net.cinnamon.common.collection.mc.toNonNullList.V)))net.cinnamon.common.collection.mc/kotlin.-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.BooleanArray)net.cinnamon.common.collection.mc/kotlin.-boolean-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.ByteArray)net.cinnamon.common.collection.mc/kotlin.-byte-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.CharArray)net.cinnamon.common.collection.mc/kotlin.-char-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.DoubleArray)net.cinnamon.common.collection.mc/kotlin.-double-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.FloatArray)net.cinnamon.common.collection.mc/kotlin.-float-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.IntArray)net.cinnamon.common.collection.mc/kotlin.-int-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.LongArray)net.cinnamon.common.collection.mc/kotlin.-long-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.ShortArray)net.cinnamon.common.collection.mc/kotlin.-short-array/to-non-null-list.html
$dokka.location:net.cinnamon.common.collection.mc$toNonNullList(kotlin.collections.Iterable((net.cinnamon.common.collection.mc.toNonNullList.V)))net.cinnamon.common.collection.mc/kotlin.collections.-iterable/to-non-null-list.html
$dokka.location:net.cinnamon.common.entity$armorToughnessValue#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/armor-toughness-value.html
$dokka.location:net.cinnamon.common.entity$armorValue#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/armor-value.html
$dokka.location:net.cinnamon.common.entity$attackDamage#net.minecraft.entity.player.EntityPlayernet.cinnamon.common.entity/net.minecraft.entity.player.-entity-player/attack-damage.html
$dokka.location:net.cinnamon.common.entity$attackSpeed#net.minecraft.entity.player.EntityPlayernet.cinnamon.common.entity/net.minecraft.entity.player.-entity-player/attack-speed.html
$dokka.location:net.cinnamon.common.entity$chestEquipment#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/chest-equipment.html
$dokka.location:net.cinnamon.common.entity$feetEquipment#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/feet-equipment.html
$dokka.location:net.cinnamon.common.entity$get(net.minecraft.entity.EntityLivingBase, net.minecraft.inventory.EntityEquipmentSlot)net.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/get.html
$dokka.location:net.cinnamon.common.entity$get(net.minecraft.entity.EntityLivingBase, net.minecraft.util.EnumHand)net.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/get.html
$dokka.location:net.cinnamon.common.entity$getPosition(net.minecraft.entity.Entity, kotlin.Float)net.cinnamon.common.entity/net.minecraft.entity.-entity/get-position.html
$dokka.location:net.cinnamon.common.entity$headEquipment#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/head-equipment.html
$dokka.location:net.cinnamon.common.entity$isInsideOf(net.minecraft.entity.Entity, net.minecraft.block.material.Material)net.cinnamon.common.entity/net.minecraft.entity.-entity/is-inside-of.html
$dokka.location:net.cinnamon.common.entity$knockbackResistance#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/knockback-resistance.html
$dokka.location:net.cinnamon.common.entity$legsEquipment#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/legs-equipment.html
$dokka.location:net.cinnamon.common.entity$mainHand#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/main-hand.html
$dokka.location:net.cinnamon.common.entity$movementSpeed#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/movement-speed.html
$dokka.location:net.cinnamon.common.entity$offHand#net.minecraft.entity.EntityLivingBasenet.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/off-hand.html
$dokka.location:net.cinnamon.common.entity$rayTraceLookVec(net.minecraft.entity.player.EntityPlayer)net.cinnamon.common.entity/net.minecraft.entity.player.-entity-player/ray-trace-look-vec.html
$dokka.location:net.cinnamon.common.entity$reachDistance#net.minecraft.entity.player.EntityPlayernet.cinnamon.common.entity/net.minecraft.entity.player.-entity-player/reach-distance.html
$dokka.location:net.cinnamon.common.entity$set(net.minecraft.entity.EntityLivingBase, net.minecraft.inventory.EntityEquipmentSlot, net.minecraft.item.ItemStack)net.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/set.html
$dokka.location:net.cinnamon.common.entity$set(net.minecraft.entity.EntityLivingBase, net.minecraft.util.EnumHand, net.minecraft.item.ItemStack)net.cinnamon.common.entity/net.minecraft.entity.-entity-living-base/set.html
$dokka.location:net.cinnamon.common.entity$toDataParameter(net.minecraft.network.datasync.DataSerializer((net.cinnamon.common.entity.toDataParameter.T)), java.lang.Class((net.minecraft.entity.Entity)))net.cinnamon.common.entity/net.minecraft.network.datasync.-data-serializer/to-data-parameter.html
$dokka.location:net.cinnamon.common.entity$toDataParameter(net.minecraft.network.datasync.DataSerializer((net.cinnamon.common.entity.toDataParameter.T)), kotlin.reflect.KClass((net.minecraft.entity.Entity)))net.cinnamon.common.entity/net.minecraft.network.datasync.-data-serializer/to-data-parameter.html
$dokka.location:net.cinnamon.common.fluid$color#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/color.html
$dokka.location:net.cinnamon.common.fluid$density#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/density.html
$dokka.location:net.cinnamon.common.fluid$doesVaporize#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/does-vaporize.html
$dokka.location:net.cinnamon.common.fluid$emptySound#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/empty-sound.html
$dokka.location:net.cinnamon.common.fluid$fillSound#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/fill-sound.html
$dokka.location:net.cinnamon.common.fluid$flowing#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/flowing.html
$dokka.location:net.cinnamon.common.fluid$isDefault#net.minecraftforge.fluids.Fluidnet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid/is-default.html
$dokka.location:net.cinnamon.common.fluid$isEmpty#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/is-empty.html
$dokka.location:net.cinnamon.common.fluid$isGaseous#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/is-gaseous.html
$dokka.location:net.cinnamon.common.fluid$isNotEmpty#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/is-not-empty.html
$dokka.location:net.cinnamon.common.fluid$isRegistered#net.minecraftforge.fluids.Fluidnet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid/is-registered.html
$dokka.location:net.cinnamon.common.fluid$luminosity#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/luminosity.html
$dokka.location:net.cinnamon.common.fluid$rarity#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/rarity.html
$dokka.location:net.cinnamon.common.fluid$registryName#net.minecraftforge.fluids.Fluidnet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid/registry-name.html
$dokka.location:net.cinnamon.common.fluid$registryName#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/registry-name.html
$dokka.location:net.cinnamon.common.fluid$still#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/still.html
$dokka.location:net.cinnamon.common.fluid$temperature#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/temperature.html
$dokka.location:net.cinnamon.common.fluid$viscosity#net.minecraftforge.fluids.FluidStacknet.cinnamon.common.fluid/net.minecraftforge.fluids.-fluid-stack/viscosity.html
$dokka.location:net.cinnamon.common.item$block#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/block.html
$dokka.location:net.cinnamon.common.item$breakStats#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/break-stats.html
$dokka.location:net.cinnamon.common.item$canRepair(net.minecraft.item.ItemStack, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.item.-item-stack/can-repair.html
$dokka.location:net.cinnamon.common.item$contains(net.minecraft.entity.player.InventoryPlayer, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.entity.player.-inventory-player/contains.html
$dokka.location:net.cinnamon.common.item$copy(net.minecraft.item.ItemStack, kotlin.Int)net.cinnamon.common.item/net.minecraft.item.-item-stack/copy.html
$dokka.location:net.cinnamon.common.item$copy(net.minecraft.item.ItemStack, kotlin.Int, kotlin.Int)net.cinnamon.common.item/net.minecraft.item.-item-stack/copy.html
$dokka.location:net.cinnamon.common.item$craftStats#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/craft-stats.html
$dokka.location:net.cinnamon.common.item$creatorModId#net.minecraft.item.ItemStacknet.cinnamon.common.item/net.minecraft.item.-item-stack/creator-mod-id.html
$dokka.location:net.cinnamon.common.item$creatorModId#net.minecraft.potion.PotionTypenet.cinnamon.common.item/net.minecraft.potion.-potion-type/creator-mod-id.html
$dokka.location:net.cinnamon.common.item$droppedStats#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/dropped-stats.html
$dokka.location:net.cinnamon.common.item$eqvHash(net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.item.-item-stack/eqv-hash.html
$dokka.location:net.cinnamon.common.item$get(net.minecraft.inventory.IInventory, kotlin.Int)net.cinnamon.common.item/net.minecraft.inventory.-i-inventory/get.html
$dokka.location:net.cinnamon.common.item$getAveragePotionColor(kotlin.collections.Collection((net.minecraft.potion.PotionEffect)))net.cinnamon.common.item/kotlin.collections.-collection/get-average-potion-color.html
$dokka.location:net.cinnamon.common.item$getSubItems(net.minecraft.item.Item, net.minecraft.creativetab.CreativeTabs)net.cinnamon.common.item/net.minecraft.item.-item/get-sub-items.html
$dokka.location:net.cinnamon.common.item$getTooltip(net.minecraft.item.ItemStack, net.minecraft.client.util.ITooltipFlag)net.cinnamon.common.item/net.minecraft.item.-item-stack/get-tooltip.html
$dokka.location:net.cinnamon.common.item$getTooltip(net.minecraft.item.ItemStack, net.minecraft.entity.player.EntityPlayer, kotlin.Boolean)net.cinnamon.common.item/net.minecraft.item.-item-stack/get-tooltip.html
$dokka.location:net.cinnamon.common.item$id#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/id.html
$dokka.location:net.cinnamon.common.item$isEmpty#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/is-empty.html
$dokka.location:net.cinnamon.common.item$isEmpty#net.minecraft.potion.PotionTypenet.cinnamon.common.item/net.minecraft.potion.-potion-type/is-empty.html
$dokka.location:net.cinnamon.common.item$isEqvTo(net.minecraft.item.ItemStack, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.item.-item-stack/is-eqv-to.html
$dokka.location:net.cinnamon.common.item$isNotEmpty#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/is-not-empty.html
$dokka.location:net.cinnamon.common.item$isNotEmpty#net.minecraft.item.ItemStacknet.cinnamon.common.item/net.minecraft.item.-item-stack/is-not-empty.html
$dokka.location:net.cinnamon.common.item$isRepairable(net.minecraft.item.ItemStack, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.item.-item-stack/is-repairable.html
$dokka.location:net.cinnamon.common.item$minusAssign(net.minecraft.entity.player.InventoryPlayer, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.entity.player.-inventory-player/minus-assign.html
$dokka.location:net.cinnamon.common.item$pickedUpStats#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/picked-up-stats.html
$dokka.location:net.cinnamon.common.item$plusAssign(net.minecraft.entity.player.InventoryPlayer, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.entity.player.-inventory-player/plus-assign.html
$dokka.location:net.cinnamon.common.item$set(net.minecraft.inventory.IInventory, kotlin.Int, net.minecraft.item.ItemStack)net.cinnamon.common.item/net.minecraft.inventory.-i-inventory/set.html
$dokka.location:net.cinnamon.common.item$size#net.minecraft.inventory.IInventorynet.cinnamon.common.item/net.minecraft.inventory.-i-inventory/size.html
$dokka.location:net.cinnamon.common.item$usageStats#net.minecraft.item.Itemnet.cinnamon.common.item/net.minecraft.item.-item/usage-stats.html
$dokka.location:net.cinnamon.common.math$ceil(kotlin.Double)net.cinnamon.common.math/kotlin.-double/ceil.html
$dokka.location:net.cinnamon.common.math$ceil(kotlin.Float)net.cinnamon.common.math/kotlin.-float/ceil.html
$dokka.location:net.cinnamon.common.math$contains(net.minecraft.util.math.RayTraceResult, java.lang.Class((net.minecraft.entity.Entity)))net.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/contains.html
$dokka.location:net.cinnamon.common.math$contains(net.minecraft.util.math.RayTraceResult, kotlin.reflect.KClass((net.minecraft.entity.Entity)))net.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/contains.html
$dokka.location:net.cinnamon.common.math$contains(net.minecraft.util.math.RayTraceResult, net.minecraft.entity.Entity)net.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/contains.html
$dokka.location:net.cinnamon.common.math$contains(net.minecraft.util.math.RayTraceResult, net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/contains.html
$dokka.location:net.cinnamon.common.math$contract(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/contract.html
$dokka.location:net.cinnamon.common.math$coordinateRandom#net.minecraft.util.math.Vec3dnet.cinnamon.common.math/net.minecraft.util.math.-vec3d/coordinate-random.html
$dokka.location:net.cinnamon.common.math$coordinateRandom#net.minecraft.util.math.Vec3inet.cinnamon.common.math/net.minecraft.util.math.-vec3i/coordinate-random.html
$dokka.location:net.cinnamon.common.math$cross(net.minecraft.util.math.BlockPos, net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-block-pos/cross.html
$dokka.location:net.cinnamon.common.math$cross(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/cross.html
$dokka.location:net.cinnamon.common.math$cross(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/cross.html
$dokka.location:net.cinnamon.common.math$distTo(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/dist-to.html
$dokka.location:net.cinnamon.common.math$distTo(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/dist-to.html
$dokka.location:net.cinnamon.common.math$dot(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/dot.html
$dokka.location:net.cinnamon.common.math$dot(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/dot.html
$dokka.location:net.cinnamon.common.math$dotProduct(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/dot-product.html
$dokka.location:net.cinnamon.common.math$expand(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/expand.html
$dokka.location:net.cinnamon.common.math$floor(kotlin.Double)net.cinnamon.common.math/kotlin.-double/floor.html
$dokka.location:net.cinnamon.common.math$floor(kotlin.Float)net.cinnamon.common.math/kotlin.-float/floor.html
$dokka.location:net.cinnamon.common.math$grow(net.minecraft.util.math.AxisAlignedBB, kotlin.Double)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/grow.html
$dokka.location:net.cinnamon.common.math$grow(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/grow.html
$dokka.location:net.cinnamon.common.math$intersect(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.AxisAlignedBB)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/intersect.html
$dokka.location:net.cinnamon.common.math$intersects(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.AxisAlignedBB)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/intersects.html
$dokka.location:net.cinnamon.common.math$isBlockHit#net.minecraft.util.math.RayTraceResultnet.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/is-block-hit.html
$dokka.location:net.cinnamon.common.math$isEntityHit#net.minecraft.util.math.RayTraceResultnet.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/is-entity-hit.html
$dokka.location:net.cinnamon.common.math$isImmutable#net.minecraft.util.math.BlockPosnet.cinnamon.common.math/net.minecraft.util.math.-block-pos/is-immutable.html
$dokka.location:net.cinnamon.common.math$isMiss#net.minecraft.util.math.RayTraceResultnet.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/is-miss.html
$dokka.location:net.cinnamon.common.math$isMutable#net.minecraft.util.math.BlockPosnet.cinnamon.common.math/net.minecraft.util.math.-block-pos/is-mutable.html
$dokka.location:net.cinnamon.common.math$minus(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/minus.html
$dokka.location:net.cinnamon.common.math$minus(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/minus.html
$dokka.location:net.cinnamon.common.math$minus(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/minus.html
$dokka.location:net.cinnamon.common.math$offset(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/offset.html
$dokka.location:net.cinnamon.common.math$offset(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/offset.html
$dokka.location:net.cinnamon.common.math$plus(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/plus.html
$dokka.location:net.cinnamon.common.math$plus(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/plus.html
$dokka.location:net.cinnamon.common.math$plus(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/plus.html
$dokka.location:net.cinnamon.common.math$rangeTo(net.minecraft.util.math.BlockPos, net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-block-pos/range-to.html
$dokka.location:net.cinnamon.common.math$rangeTo(net.minecraft.util.math.BlockPos.MutableBlockPos, net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-block-pos.-mutable-block-pos/range-to.html
$dokka.location:net.cinnamon.common.math$rangeTo(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/range-to.html
$dokka.location:net.cinnamon.common.math$rangeTo(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/range-to.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), kotlin.Double, kotlin.Double, kotlin.Double, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), kotlin.Int, kotlin.Int, kotlin.Int, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.entity.Entity, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.BlockPos, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.Array((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.-array/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), kotlin.Double, kotlin.Double, kotlin.Double, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), kotlin.Int, kotlin.Int, kotlin.Int, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.entity.Entity, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.BlockPos, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rayTrace(kotlin.collections.Iterable((net.minecraft.util.math.AxisAlignedBB)), net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/kotlin.collections.-iterable/ray-trace.html
$dokka.location:net.cinnamon.common.math$rotateTo(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.EnumFacing)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/rotate-to.html
$dokka.location:net.cinnamon.common.math$shrink(net.minecraft.util.math.AxisAlignedBB, kotlin.Double)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/shrink.html
$dokka.location:net.cinnamon.common.math$shrink(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/shrink.html
$dokka.location:net.cinnamon.common.math$sqrDistTo(net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/sqr-dist-to.html
$dokka.location:net.cinnamon.common.math$sqrDistTo(net.minecraft.util.math.Vec3i, net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/sqr-dist-to.html
$dokka.location:net.cinnamon.common.math$toBlockPos(net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/to-block-pos.html
$dokka.location:net.cinnamon.common.math$toBlockPos(net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/to-block-pos.html
$dokka.location:net.cinnamon.common.math$toMutable(net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-block-pos/to-mutable.html
$dokka.location:net.cinnamon.common.math$toPooled(net.minecraft.util.math.BlockPos)net.cinnamon.common.math/net.minecraft.util.math.-block-pos/to-pooled.html
$dokka.location:net.cinnamon.common.math$toPooled(net.minecraft.util.math.BlockPos, kotlin.Function1((net.minecraft.util.math.BlockPos.PooledMutableBlockPos, kotlin.Unit)))net.cinnamon.common.math/net.minecraft.util.math.-block-pos/to-pooled.html
$dokka.location:net.cinnamon.common.math$toVec3d(net.minecraft.util.math.Vec3i)net.cinnamon.common.math/net.minecraft.util.math.-vec3i/to-vec3d.html
$dokka.location:net.cinnamon.common.math$toVec3i(net.minecraft.util.math.Vec3d)net.cinnamon.common.math/net.minecraft.util.math.-vec3d/to-vec3i.html
$dokka.location:net.cinnamon.common.math$typeOfHit#net.minecraft.util.math.RayTraceResultnet.cinnamon.common.math/net.minecraft.util.math.-ray-trace-result/type-of-hit.html
$dokka.location:net.cinnamon.common.math$union(net.minecraft.util.math.AxisAlignedBB, net.minecraft.util.math.AxisAlignedBB)net.cinnamon.common.math/net.minecraft.util.math.-axis-aligned-b-b/union.html
$dokka.location:net.cinnamon.common.math$withSeed(java.util.Random, kotlin.Long)net.cinnamon.common.math/java.util.-random/with-seed.html
$dokka.location:net.cinnamon.common.reflection$findConstructor(java.lang.Class((net.cinnamon.common.reflection.findConstructor.T)), kotlin.Array((java.lang.Class((kotlin.Any)))))net.cinnamon.common.reflection/java.lang.-class/find-constructor.html
$dokka.location:net.cinnamon.common.reflection$findConstructor(kotlin.reflect.KClass((net.cinnamon.common.reflection.findConstructor.T)), kotlin.Array((kotlin.reflect.KClass((kotlin.Any)))))net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-constructor.html
$dokka.location:net.cinnamon.common.reflection$findField(java.lang.Class((kotlin.Any)), kotlin.Int)net.cinnamon.common.reflection/java.lang.-class/find-field.html
$dokka.location:net.cinnamon.common.reflection$findField(java.lang.Class((kotlin.Any)), kotlin.String)net.cinnamon.common.reflection/java.lang.-class/find-field.html
$dokka.location:net.cinnamon.common.reflection$findField(kotlin.reflect.KClass((kotlin.Any)), kotlin.Int)net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-field.html
$dokka.location:net.cinnamon.common.reflection$findField(kotlin.reflect.KClass((kotlin.Any)), kotlin.String)net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-field.html
$dokka.location:net.cinnamon.common.reflection$findMethod(java.lang.Class((kotlin.Any)), kotlin.String, kotlin.Array((java.lang.Class((kotlin.Any)))))net.cinnamon.common.reflection/java.lang.-class/find-method.html
$dokka.location:net.cinnamon.common.reflection$findMethod(kotlin.reflect.KClass((kotlin.Any)), kotlin.String, kotlin.Array((kotlin.reflect.KClass((kotlin.Any)))))net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-method.html
$dokka.location:net.cinnamon.common.reflection$findObfuscatedField(java.lang.Class((kotlin.Any)), kotlin.String)net.cinnamon.common.reflection/java.lang.-class/find-obfuscated-field.html
$dokka.location:net.cinnamon.common.reflection$findObfuscatedField(kotlin.reflect.KClass((kotlin.Any)), kotlin.String)net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-obfuscated-field.html
$dokka.location:net.cinnamon.common.reflection$findObfuscatedMethod(java.lang.Class((kotlin.Any)), kotlin.String, kotlin.Array((java.lang.Class((kotlin.Any)))))net.cinnamon.common.reflection/java.lang.-class/find-obfuscated-method.html
$dokka.location:net.cinnamon.common.reflection$findObfuscatedMethod(kotlin.reflect.KClass((kotlin.Any)), kotlin.String, kotlin.Array((kotlin.reflect.KClass((kotlin.Any)))))net.cinnamon.common.reflection/kotlin.reflect.-k-class/find-obfuscated-method.html
$dokka.location:net.cinnamon.common.reflection$getValue(java.lang.Class((net.cinnamon.common.reflection.getValue.E)), kotlin.Int, net.cinnamon.common.reflection.getValue.E)net.cinnamon.common.reflection/java.lang.-class/get-value.html
$dokka.location:net.cinnamon.common.reflection$getValue(java.lang.Class((net.cinnamon.common.reflection.getValue.E)), kotlin.String, net.cinnamon.common.reflection.getValue.E)net.cinnamon.common.reflection/java.lang.-class/get-value.html
$dokka.location:net.cinnamon.common.reflection$getValue(kotlin.reflect.KClass((net.cinnamon.common.reflection.getValue.E)), kotlin.Int, net.cinnamon.common.reflection.getValue.E)net.cinnamon.common.reflection/kotlin.reflect.-k-class/get-value.html
$dokka.location:net.cinnamon.common.reflection$getValue(kotlin.reflect.KClass((net.cinnamon.common.reflection.getValue.E)), kotlin.String, net.cinnamon.common.reflection.getValue.E)net.cinnamon.common.reflection/kotlin.reflect.-k-class/get-value.html
$dokka.location:net.cinnamon.common.reflection$isAbstract#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-abstract.html
$dokka.location:net.cinnamon.common.reflection$isAbstract#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-abstract.html
$dokka.location:net.cinnamon.common.reflection$isAbstract#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-abstract.html
$dokka.location:net.cinnamon.common.reflection$isFinal#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-final.html
$dokka.location:net.cinnamon.common.reflection$isFinal#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-final.html
$dokka.location:net.cinnamon.common.reflection$isFinal#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-final.html
$dokka.location:net.cinnamon.common.reflection$isInternal#kotlin.reflect.KClass((kotlin.Any))net.cinnamon.common.reflection/kotlin.reflect.-k-class/is-internal.html
$dokka.location:net.cinnamon.common.reflection$isNative#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-native.html
$dokka.location:net.cinnamon.common.reflection$isNative#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-native.html
$dokka.location:net.cinnamon.common.reflection$isPrivate#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-private.html
$dokka.location:net.cinnamon.common.reflection$isPrivate#java.lang.reflect.Constructor((kotlin.Any))net.cinnamon.common.reflection/java.lang.reflect.-constructor/is-private.html
$dokka.location:net.cinnamon.common.reflection$isPrivate#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-private.html
$dokka.location:net.cinnamon.common.reflection$isPrivate#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-private.html
$dokka.location:net.cinnamon.common.reflection$isPrivate#kotlin.reflect.KClass((kotlin.Any))net.cinnamon.common.reflection/kotlin.reflect.-k-class/is-private.html
$dokka.location:net.cinnamon.common.reflection$isProtected#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-protected.html
$dokka.location:net.cinnamon.common.reflection$isProtected#java.lang.reflect.Constructor((kotlin.Any))net.cinnamon.common.reflection/java.lang.reflect.-constructor/is-protected.html
$dokka.location:net.cinnamon.common.reflection$isProtected#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-protected.html
$dokka.location:net.cinnamon.common.reflection$isProtected#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-protected.html
$dokka.location:net.cinnamon.common.reflection$isProtected#kotlin.reflect.KClass((kotlin.Any))net.cinnamon.common.reflection/kotlin.reflect.-k-class/is-protected.html
$dokka.location:net.cinnamon.common.reflection$isPublic#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-public.html
$dokka.location:net.cinnamon.common.reflection$isPublic#java.lang.reflect.Constructor((kotlin.Any))net.cinnamon.common.reflection/java.lang.reflect.-constructor/is-public.html
$dokka.location:net.cinnamon.common.reflection$isPublic#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-public.html
$dokka.location:net.cinnamon.common.reflection$isPublic#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-public.html
$dokka.location:net.cinnamon.common.reflection$isPublic#kotlin.reflect.KClass((kotlin.Any))net.cinnamon.common.reflection/kotlin.reflect.-k-class/is-public.html
$dokka.location:net.cinnamon.common.reflection$isStatic#java.lang.Class((kotlin.Any))net.cinnamon.common.reflection/java.lang.-class/is-static.html
$dokka.location:net.cinnamon.common.reflection$isStatic#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-static.html
$dokka.location:net.cinnamon.common.reflection$isStatic#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-static.html
$dokka.location:net.cinnamon.common.reflection$isSynchronized#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-synchronized.html
$dokka.location:net.cinnamon.common.reflection$isSynchronized#java.lang.reflect.Methodnet.cinnamon.common.reflection/java.lang.reflect.-method/is-synchronized.html
$dokka.location:net.cinnamon.common.reflection$isTransient#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-transient.html
$dokka.location:net.cinnamon.common.reflection$isVolatile#java.lang.reflect.Fieldnet.cinnamon.common.reflection/java.lang.reflect.-field/is-volatile.html
$dokka.location:net.cinnamon.common.reflection$setValue(java.lang.Class((net.cinnamon.common.reflection.setValue.E)), kotlin.Int, net.cinnamon.common.reflection.setValue.T, net.cinnamon.common.reflection.setValue.E)net.cinnamon.common.reflection/java.lang.-class/set-value.html
$dokka.location:net.cinnamon.common.reflection$setValue(java.lang.Class((net.cinnamon.common.reflection.setValue.E)), kotlin.String, net.cinnamon.common.reflection.setValue.T, net.cinnamon.common.reflection.setValue.E)net.cinnamon.common.reflection/java.lang.-class/set-value.html
$dokka.location:net.cinnamon.common.reflection$setValue(kotlin.reflect.KClass((net.cinnamon.common.reflection.setValue.E)), kotlin.Int, net.cinnamon.common.reflection.setValue.T, net.cinnamon.common.reflection.setValue.E)net.cinnamon.common.reflection/kotlin.reflect.-k-class/set-value.html
$dokka.location:net.cinnamon.common.reflection$setValue(kotlin.reflect.KClass((net.cinnamon.common.reflection.setValue.E)), kotlin.String, net.cinnamon.common.reflection.setValue.T, net.cinnamon.common.reflection.setValue.E)net.cinnamon.common.reflection/kotlin.reflect.-k-class/set-value.html
$dokka.location:net.cinnamon.common.registry$contains(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.contains.V)), kotlin.String)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/contains.html
$dokka.location:net.cinnamon.common.registry$contains(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.contains.V)), net.cinnamon.common.registry.contains.V)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/contains.html
$dokka.location:net.cinnamon.common.registry$contains(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.contains.V)), net.minecraft.util.ResourceLocation)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/contains.html
$dokka.location:net.cinnamon.common.registry$get(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.get.V)), kotlin.String)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/get.html
$dokka.location:net.cinnamon.common.registry$get(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.get.V)), net.minecraft.util.ResourceLocation)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/get.html
$dokka.location:net.cinnamon.common.registry$hasRegistryName(net.minecraftforge.registries.IForgeRegistryEntry((kotlin.Any)))net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry-entry/has-registry-name.html
$dokka.location:net.cinnamon.common.registry$isVanilla#net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.isVanilla.V))net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/is-vanilla.html
$dokka.location:net.cinnamon.common.registry$name#net.minecraftforge.registries.IForgeRegistryEntry((kotlin.Any))net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry-entry/name.html
$dokka.location:net.cinnamon.common.registry$plusAssign(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.plusAssign.V)), net.cinnamon.common.registry.plusAssign.V)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/plus-assign.html
$dokka.location:net.cinnamon.common.registry$registryName#net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.registryName.V))net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/registry-name.html
$dokka.location:net.cinnamon.common.registry$set(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.set.V)), kotlin.String, net.cinnamon.common.registry.set.V)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/set.html
$dokka.location:net.cinnamon.common.registry$set(net.minecraftforge.registries.IForgeRegistry((net.cinnamon.common.registry.set.V)), net.minecraft.util.ResourceLocation, net.cinnamon.common.registry.set.V)net.cinnamon.common.registry/net.minecraftforge.registries.-i-forge-registry/set.html
$dokka.location:net.cinnamon.common.serializable.json$flatten(kotlin.Array((com.google.gson.JsonArray)))net.cinnamon.common.serializable.json/kotlin.-array/flatten.html
$dokka.location:net.cinnamon.common.serializable.json$toJson(kotlin.Boolean)net.cinnamon.common.serializable.json/kotlin.-boolean/to-json.html
$dokka.location:net.cinnamon.common.serializable.json$toJson(kotlin.Char)net.cinnamon.common.serializable.json/kotlin.-char/to-json.html
$dokka.location:net.cinnamon.common.serializable.json$toJson(kotlin.Number)net.cinnamon.common.serializable.json/kotlin.-number/to-json.html
$dokka.location:net.cinnamon.common.serializable.json$toJson(kotlin.String)net.cinnamon.common.serializable.json/kotlin.-string/to-json.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.Array((com.google.gson.JsonElement)))net.cinnamon.common.serializable.json/kotlin.-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.Array((kotlin.Any)))net.cinnamon.common.serializable.json/kotlin.-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.Array((kotlin.String)))net.cinnamon.common.serializable.json/kotlin.-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.BooleanArray)net.cinnamon.common.serializable.json/kotlin.-boolean-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.ByteArray)net.cinnamon.common.serializable.json/kotlin.-byte-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.CharArray)net.cinnamon.common.serializable.json/kotlin.-char-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.DoubleArray)net.cinnamon.common.serializable.json/kotlin.-double-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.FloatArray)net.cinnamon.common.serializable.json/kotlin.-float-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.IntArray)net.cinnamon.common.serializable.json/kotlin.-int-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.LongArray)net.cinnamon.common.serializable.json/kotlin.-long-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.json$toJsonArray(kotlin.ShortArray)net.cinnamon.common.serializable.json/kotlin.-short-array/to-json-array.html
$dokka.location:net.cinnamon.common.serializable.nbt$contains(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/contains.html
$dokka.location:net.cinnamon.common.serializable.nbt$get(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get.html
$dokka.location:net.cinnamon.common.serializable.nbt$getBlockPos(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-block-pos.html
$dokka.location:net.cinnamon.common.serializable.nbt$getBlockState(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-block-state.html
$dokka.location:net.cinnamon.common.serializable.nbt$getEnumConstant(net.minecraft.nbt.NBTTagCompound, java.lang.Class((net.cinnamon.common.serializable.nbt.getEnumConstant.E)), kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-enum-constant.html
$dokka.location:net.cinnamon.common.serializable.nbt$getEnumConstant(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-enum-constant.html
$dokka.location:net.cinnamon.common.serializable.nbt$getEnumConstant(net.minecraft.nbt.NBTTagCompound, kotlin.reflect.KClass((net.cinnamon.common.serializable.nbt.getEnumConstant.E)), kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-enum-constant.html
$dokka.location:net.cinnamon.common.serializable.nbt$getGameProfile(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-game-profile.html
$dokka.location:net.cinnamon.common.serializable.nbt$getModelResourceLocation(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-model-resource-location.html
$dokka.location:net.cinnamon.common.serializable.nbt$getResourceLocation(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-resource-location.html
$dokka.location:net.cinnamon.common.serializable.nbt$getVec3d(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-vec3d.html
$dokka.location:net.cinnamon.common.serializable.nbt$getVec3i(net.minecraft.nbt.NBTTagCompound, kotlin.String)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/get-vec3i.html
$dokka.location:net.cinnamon.common.serializable.nbt$hasKeys(net.minecraft.nbt.NBTTagCompound, kotlin.Array((kotlin.String)))net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/has-keys.html
$dokka.location:net.cinnamon.common.serializable.nbt$hasKeys(net.minecraft.nbt.NBTTagCompound, kotlin.Int, kotlin.Array((kotlin.String)))net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/has-keys.html
$dokka.location:net.cinnamon.common.serializable.nbt$plus(net.minecraft.nbt.NBTTagCompound, net.minecraft.nbt.NBTTagCompound)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/plus.html
$dokka.location:net.cinnamon.common.serializable.nbt$plusAssign(net.minecraft.nbt.NBTTagCompound, net.minecraft.nbt.NBTTagCompound)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/plus-assign.html
$dokka.location:net.cinnamon.common.serializable.nbt$set(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.cinnamon.common.serializable.nbt.set.T)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set.html
$dokka.location:net.cinnamon.common.serializable.nbt$setBlockPos(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.util.math.BlockPos)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-block-pos.html
$dokka.location:net.cinnamon.common.serializable.nbt$setBlockState(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.block.state.IBlockState)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-block-state.html
$dokka.location:net.cinnamon.common.serializable.nbt$setEnumConstant(net.minecraft.nbt.NBTTagCompound, kotlin.String, kotlin.Enum(()))net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-enum-constant.html
$dokka.location:net.cinnamon.common.serializable.nbt$setGameProfile(net.minecraft.nbt.NBTTagCompound, kotlin.String, com.mojang.authlib.GameProfile)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-game-profile.html
$dokka.location:net.cinnamon.common.serializable.nbt$setModelResourceLocation(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.client.renderer.block.model.ModelResourceLocation)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-model-resource-location.html
$dokka.location:net.cinnamon.common.serializable.nbt$setResourceLocation(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.util.ResourceLocation)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-resource-location.html
$dokka.location:net.cinnamon.common.serializable.nbt$setVec3d(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.util.math.Vec3d)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-vec3d.html
$dokka.location:net.cinnamon.common.serializable.nbt$setVec3i(net.minecraft.nbt.NBTTagCompound, kotlin.String, net.minecraft.util.math.Vec3i)net.cinnamon.common.serializable.nbt/net.minecraft.nbt.-n-b-t-tag-compound/set-vec3i.html
$dokka.location:net.cinnamon.common.serializable.nbt$toTagList(kotlin.collections.Iterable((net.cinnamon.common.serializable.nbt.toTagList.T)))net.cinnamon.common.serializable.nbt/kotlin.collections.-iterable/to-tag-list.html
$dokka.location:net.cinnamon.common.world$addTypes(net.minecraft.world.biome.Biome, kotlin.Array((net.minecraftforge.common.BiomeDictionary.Type)))net.cinnamon.common.world/net.minecraft.world.biome.-biome/add-types.html
$dokka.location:net.cinnamon.common.world$biomes#net.minecraftforge.common.BiomeDictionary.Typenet.cinnamon.common.world/net.minecraftforge.common.-biome-dictionary.-type/biomes.html
$dokka.location:net.cinnamon.common.world$canBeReplacedByLeaves(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-be-replaced-by-leaves.html
$dokka.location:net.cinnamon.common.world$canConnectRedstone(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-connect-redstone.html
$dokka.location:net.cinnamon.common.world$canCreatureSpawn(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.entity.EntityLiving.SpawnPlacementType)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-creature-spawn.html
$dokka.location:net.cinnamon.common.world$canEntitySpawn(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.entity.Entity)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-entity-spawn.html
$dokka.location:net.cinnamon.common.world$canSilkHarvest(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.entity.player.EntityPlayer)net.cinnamon.common.world/net.minecraft.world.-world/can-silk-harvest.html
$dokka.location:net.cinnamon.common.world$canSustainLeaves(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-sustain-leaves.html
$dokka.location:net.cinnamon.common.world$canSustainPlant(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing, net.minecraftforge.common.IPlantable)net.cinnamon.common.world/net.minecraft.world.-i-block-access/can-sustain-plant.html
$dokka.location:net.cinnamon.common.world$collisionRayTrace(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.util.math.Vec3d, net.minecraft.util.math.Vec3d)net.cinnamon.common.world/net.minecraft.world.-world/collision-ray-trace.html
$dokka.location:net.cinnamon.common.world$contains(net.minecraft.world.biome.Biome, net.minecraftforge.common.BiomeDictionary.Type)net.cinnamon.common.world/net.minecraft.world.biome.-biome/contains.html
$dokka.location:net.cinnamon.common.world$doesSideBlockChestOpening(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/does-side-block-chest-opening.html
$dokka.location:net.cinnamon.common.world$doesSideBlockRendering(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/does-side-block-rendering.html
$dokka.location:net.cinnamon.common.world$getActualState(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-actual-state.html
$dokka.location:net.cinnamon.common.world$getBlockFaceShape(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-block-face-shape.html
$dokka.location:net.cinnamon.common.world$getBlockHardness(net.minecraft.world.World, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-world/get-block-hardness.html
$dokka.location:net.cinnamon.common.world$getBlockHardness(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.entity.player.EntityPlayer)net.cinnamon.common.world/net.minecraft.world.-world/get-block-hardness.html
$dokka.location:net.cinnamon.common.world$getBoundingBox(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-bounding-box.html
$dokka.location:net.cinnamon.common.world$getCollisionBoundingBox(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-collision-bounding-box.html
$dokka.location:net.cinnamon.common.world$getComparatorOutput(net.minecraft.world.World, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-world/get-comparator-output.html
$dokka.location:net.cinnamon.common.world$getDrops(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, kotlin.Int)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-drops.html
$dokka.location:net.cinnamon.common.world$getDrops(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.NonNullList((net.minecraft.item.ItemStack)), kotlin.Int)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-drops.html
$dokka.location:net.cinnamon.common.world$getExplosionResistance(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.world.Explosion, net.minecraft.entity.Entity)net.cinnamon.common.world/net.minecraft.world.-world/get-explosion-resistance.html
$dokka.location:net.cinnamon.common.world$getExtendedState(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-extended-state.html
$dokka.location:net.cinnamon.common.world$getFireSpread(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-fire-spread.html
$dokka.location:net.cinnamon.common.world$getFlammability(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-flammability.html
$dokka.location:net.cinnamon.common.world$getLightOpacity(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-light-opacity.html
$dokka.location:net.cinnamon.common.world$getLightValue(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-light-value.html
$dokka.location:net.cinnamon.common.world$getMapColor(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-map-color.html
$dokka.location:net.cinnamon.common.world$getPackedLightmapCoords(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-packed-lightmap-coords.html
$dokka.location:net.cinnamon.common.world$getPickBlock(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.util.math.RayTraceResult, net.minecraft.entity.player.EntityPlayer)net.cinnamon.common.world/net.minecraft.world.-world/get-pick-block.html
$dokka.location:net.cinnamon.common.world$getSelectedBoundingBox(net.minecraft.world.World, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-world/get-selected-bounding-box.html
$dokka.location:net.cinnamon.common.world$getSlipperiness(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.entity.Entity)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-slipperiness.html
$dokka.location:net.cinnamon.common.world$getWeakPower(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/get-weak-power.html
$dokka.location:net.cinnamon.common.world$hasTileEntity(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/has-tile-entity.html
$dokka.location:net.cinnamon.common.world$id#net.minecraft.world.biome.Biomenet.cinnamon.common.world/net.minecraft.world.biome.-biome/id.html
$dokka.location:net.cinnamon.common.world$isBed(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.entity.player.EntityPlayer)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-bed.html
$dokka.location:net.cinnamon.common.world$isBurning(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-burning.html
$dokka.location:net.cinnamon.common.world$isFireSource(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-world/is-fire-source.html
$dokka.location:net.cinnamon.common.world$isFlammable(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-flammable.html
$dokka.location:net.cinnamon.common.world$isLadder(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.entity.EntityLivingBase)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-ladder.html
$dokka.location:net.cinnamon.common.world$isLeaves(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-leaves.html
$dokka.location:net.cinnamon.common.world$isNormalCube(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-normal-cube.html
$dokka.location:net.cinnamon.common.world$isPassable(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-passable.html
$dokka.location:net.cinnamon.common.world$isReplaceable(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-replaceable.html
$dokka.location:net.cinnamon.common.world$isSideSolid(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-side-solid.html
$dokka.location:net.cinnamon.common.world$isSimilarTo(net.minecraft.world.biome.Biome, net.minecraft.world.biome.Biome)net.cinnamon.common.world/net.minecraft.world.biome.-biome/is-similar-to.html
$dokka.location:net.cinnamon.common.world$isWood(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos)net.cinnamon.common.world/net.minecraft.world.-i-block-access/is-wood.html
$dokka.location:net.cinnamon.common.world$plusAssign(net.minecraft.world.biome.Biome, net.minecraftforge.common.BiomeDictionary.Type)net.cinnamon.common.world/net.minecraft.world.biome.-biome/plus-assign.html
$dokka.location:net.cinnamon.common.world$recolorBlock(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing, net.minecraft.item.EnumDyeColor)net.cinnamon.common.world/net.minecraft.world.-world/recolor-block.html
$dokka.location:net.cinnamon.common.world$rotateBlock(net.minecraft.world.World, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-world/rotate-block.html
$dokka.location:net.cinnamon.common.world$shouldSideBeRendered(net.minecraft.world.IBlockAccess, net.minecraft.util.math.BlockPos, net.minecraft.util.EnumFacing)net.cinnamon.common.world/net.minecraft.world.-i-block-access/should-side-be-rendered.html
$dokka.location:net.cinnamon.common.world$types#net.minecraft.world.biome.Biomenet.cinnamon.common.world/net.minecraft.world.biome.-biome/types.html
$dokka.location:net.cinnamon.support.baubles$bauble#net.minecraft.item.ItemStacknet.cinnamon.support.baubles/net.minecraft.item.-item-stack/bauble.html
$dokka.location:net.cinnamon.support.baubles$baublesInventory#net.minecraft.entity.player.EntityPlayernet.cinnamon.support.baubles/net.minecraft.entity.player.-entity-player/baubles-inventory.html
$dokka.location:net.cinnamon.support.baubles$getSlotForBauble(net.minecraft.entity.player.EntityPlayer, net.minecraft.item.Item)net.cinnamon.support.baubles/net.minecraft.entity.player.-entity-player/get-slot-for-bauble.html
$dokka.location:net.cinnamon.support.baubles$getSlotForBauble(net.minecraft.entity.player.EntityPlayer, net.minecraft.item.ItemStack)net.cinnamon.support.baubles/net.minecraft.entity.player.-entity-player/get-slot-for-bauble.html
$dokka.location:net.cinnamon.support.baubles$hasBauble(net.minecraft.entity.player.EntityPlayer, net.minecraft.item.Item)net.cinnamon.support.baubles/net.minecraft.entity.player.-entity-player/has-bauble.html
$dokka.location:net.cinnamon.support.baubles$hasBauble(net.minecraft.entity.player.EntityPlayer, net.minecraft.item.ItemStack)net.cinnamon.support.baubles/net.minecraft.entity.player.-entity-player/has-bauble.html
$dokka.location:net.cinnamon.support.waila$registerCompound(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.block.Block)))), kotlin.Function1((net.cinnamon.support.waila.context.BlockCompoundContext, kotlin.Unit)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-compound.html
$dokka.location:net.cinnamon.support.waila$registerCompound(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.entity.Entity)))), kotlin.Function1((net.cinnamon.support.waila.context.EntityCompoundContext, kotlin.Unit)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-compound.html
$dokka.location:net.cinnamon.support.waila$registerCompound(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.consumer.BlockCompoundConsumer, kotlin.Array((java.lang.Class((net.minecraft.block.Block)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-compound.html
$dokka.location:net.cinnamon.support.waila$registerCompound(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.consumer.EntityCompoundConsumer, kotlin.Array((java.lang.Class((net.minecraft.entity.Entity)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-compound.html
$dokka.location:net.cinnamon.support.waila$registerEntity(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.entity.Entity)))), kotlin.Function1((net.cinnamon.support.waila.context.EntityContext, net.minecraft.entity.Entity)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-entity.html
$dokka.location:net.cinnamon.support.waila$registerEntity(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.function.EntityFunction, kotlin.Array((java.lang.Class((net.minecraft.entity.Entity)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-entity.html
$dokka.location:net.cinnamon.support.waila$registerItem(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.block.Block)))), kotlin.Function1((net.cinnamon.support.waila.context.ItemContext, net.minecraft.item.ItemStack)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-item.html
$dokka.location:net.cinnamon.support.waila$registerItem(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.function.ItemFunction, kotlin.Array((java.lang.Class((net.minecraft.block.Block)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-item.html
$dokka.location:net.cinnamon.support.waila$registerTooltip(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.block.Block)))), kotlin.Function1((net.cinnamon.support.waila.context.ItemTooltipContext, kotlin.Unit)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-tooltip.html
$dokka.location:net.cinnamon.support.waila$registerTooltip(mcp.mobius.waila.api.IWailaRegistrar, kotlin.Array((kotlin.reflect.KClass((net.minecraft.entity.Entity)))), kotlin.Function1((net.cinnamon.support.waila.context.EntityTooltipContext, kotlin.Unit)))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-tooltip.html
$dokka.location:net.cinnamon.support.waila$registerTooltip(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.consumer.EntityTooltipConsumer, kotlin.Array((java.lang.Class((net.minecraft.entity.Entity)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-tooltip.html
$dokka.location:net.cinnamon.support.waila$registerTooltip(mcp.mobius.waila.api.IWailaRegistrar, net.cinnamon.support.waila.consumer.ItemTooltipConsumer, kotlin.Array((java.lang.Class((net.minecraft.block.Block)))))net.cinnamon.support.waila/mcp.mobius.waila.api.-i-waila-registrar/register-tooltip.html
net.cinnamon.client
net.cinnamon.common
net.cinnamon.common.base
net.cinnamon.common.block
net.cinnamon.common.block.properties
net.cinnamon.common.capability
net.cinnamon.common.collection
net.cinnamon.common.collection.fastutil
net.cinnamon.common.collection.mc
net.cinnamon.common.entity
net.cinnamon.common.fluid
net.cinnamon.common.item
net.cinnamon.common.math
net.cinnamon.common.reflection
net.cinnamon.common.registry
net.cinnamon.common.serializable.json
net.cinnamon.common.serializable.nbt
net.cinnamon.common.world
net.cinnamon.support.baubles
net.cinnamon.support.fml
net.cinnamon.support.waila
net.cinnamon.support.waila.consumer
net.cinnamon.support.waila.context
net.cinnamon.support.waila.function
